version: '3.8'

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: .
      target: builder
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    env_file: .env
    environment:
      PYTHONUNBUFFERED: 1
      GUNICORN_WORKERS: 4
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - django_static:/app/static
    restart: unless-stopped

  web:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - django_static:/usr/share/nginx/html/static
    depends_on:
      - backend
    restart: unless-stopped

  celery:
    build: .
    command: celery -A config worker --loglevel=info --concurrency=4
    env_file: .env
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
    depends_on:
      - db
      - redis
    restart: unless-stopped

  celery_beat:
    build: .
    command: celery -A config beat --loglevel=info --pidfile=
    env_file: .env
    depends_on:
      - db
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  django_static:
    driver: local